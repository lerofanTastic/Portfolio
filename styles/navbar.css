/*************************
 * Стили классов навбара *
 *************************/
 nav {
  width: 100%;
  height: 126px;
  margin: 0;
  padding: 0;
  /* Фиксируем навбар с помощью свойства position: fixed.
   * Оно сделает так, чтобы навбар всегда оставался
   * вверху страницы при прокрутке. */
  position: fixed;
  top: 0;
  /* Задаем z-index. Он должен быть больше, чем любой другой
   * на странице, чтобы навбар не скрывался под другими элементами. */
  z-index: 10;
  display: flex;
  /* Навбар состоит из двух частей: ссылок на разделы и кнопки.
   * Выравниваем первую часть навбара (ссылки) по правому, 
   * а не по левому краю с помощью justify-content: flex-end.
   * Используется flex-end, так как отображение flex 
   * по умолчанию — row, а не row-reverse. */
  justify-content: flex-end;
  align-items: center;
  /* Создаем тень для навбара. */
  box-shadow: var(--nav-shadow);
  /* Задаем навбару background-color. Это нужно, чтобы при прокрутке
   * страницы навбар перекрывал другой контент.
   * Если не задать фон, навбар будет прозрачным и из-под него
   * будет видно другой контент страницы. */
  background-color: var(--color-whit);
}

nav.mobile-nav {
  /* Скрываем по умолчанию отдельный navbar для мобильных устройств. */
  display: none;
  justify-content: space-between;
  padding: 38.5px 60px;
  align-items: flex-start;
  box-sizing: border-box;
  /* Задаем стили, которые отличаются от большого навбара для декстопа.
   * Отменяем заданную высоту, т.к. высота мобильного навбара обеспечивается
   * иначе: с помощью высоты и отступов внутренних элементов.
   * Эти изменения нужны потому, что высота мобильного навбара
   * увеличивается, когда открывается бургерное меню. 
   * Для того, чтобы этот момент отображался корректно, важно, чтобы
   * высота подстраивалась под это автоматически. 
   * Если задана конкретная высота, этого не произойдет. */
  height: unset;
  transition: all 0.3s ease-in;
}

.mobile-nav summary {
  width: 49px;
  height: 49px;
  /* Добавляем иконку бургерного меню. 
   * Добавляем картинку как фон, а не как отдельный элемент. 
   * Так ее проще заменить на ховере. Также это упрощает настройку размера. */
  background-image: url(../assets/icons/Menu.svg);
  /* Добавим курсор на кнопку меню на случай, если кто-то откроет сайт на компьютере в узком окне. */
  cursor: pointer;
}

/* Используем [open] для <details>. 
* Он применяет к элементу встроенные состояния браузера для <details>:
* открытое или скрытое. Также позволяет настроить стили. */
.mobile-nav details[open] {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  padding: 0;
}

.mobile-nav details[open] summary {
  background-image: url(../assets/icons/Menu-active.svg);
}

nav ul {
  /* Отключаем форматирование списка. Не отключаем его в начале
   * вместе с другими стилями по умолчанию, т.к. на странице может появиться
   * список, которому нужно оформление по умолчанию. */
  list-style: none;
  /* Делим навбар на три части: пустой отступ 25%,
   * сама навигация 50% и контейнер для кнопки — 25%. */
  width: 50%;
  margin: 45px 0 45px 25%;
  padding: 0;
  /* Задаем ссылкам отображение display: flex как для контейнера-родителя 
   * с кнопками навбара (элементами <li>). Это нужно для корректного выравнивания 
   * их по ширине навбара. */
  display: flex;
  /* Задаем выравнивание ссылкам навбара.
   * Направление Flexbox горизонтальное по умолчанию, поэтому 
   * выравниваем элементы с помощью justify-content: space-around. 
   * Так ссылки распределяются по всей ширине родителя.
   * Используем space-around, а не space-between, чтобы сохранить
   * отступ от кнопки справа на более узких экранах. 
   * Если выбрать space-between, ссылки «прилипнут» к краям 
   * контейнера-родителям и отступ от кнопки может стать очень маленьким. */
  justify-content: space-around;
  align-items: center;
}

.mobile-nav ul {
  /* Задаем мобильному навбару стили, которые отличаются от десктопного. */
  margin: 0;
  padding-top: 38.5px;
  width: 100%;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  gap: 25px;
}

/* Задаем стили для ссылок в навигации. */
.nav-button {
  font: 700 25px/36px "TildaSans", sans-serif;
}

/* Задаем стили для кнопки связаться в навбаре. */
.contact-button {
  border: var(--button-border);
  padding: 9px 22px;
  border-radius: 15px;
  margin: 0;
  /* Не задаем здесь свойство color здесь, так как 
   * цвет задается классом color-orange */
}

.contact-button:hover {
  background-color: var(--color-orng);
  /* Задаем стили для ховера кнопки. Цвет текста 
   * в элементе задается через наследования цвета 
   * от родительского элемента с классом color-orange (см. ниже). 
   * Поэтому в ховере нужно задать другой цвет тексту через color.
   * Специфичность псевдокласса hover выше, чем у наследуемого цвета.
   * Поэтому при наведении курсора мыши на кнопку 
   * цвет текста color-orange будет меняться на белый. */
  color: var(--color-whit);
}

/* Задаем стили для текста внутри кнопки связаться */
.contact-button-text {
  font: var(--text-bold-button);
  /* Задаем цвет текста через наследование 
   * из родительского элемента contact-button. 
   * Цвет у contact-button задается через общий класс
   * с цветом color-orange. */
  color: inherit;
}

.contact-button-container {
  /* Про 25% см выше (строка 83, селектор nav ul) */
  width: 25%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.mobile-nav .contact-button-container {
  width: 40%;
  margin: 0 5%;
}

/* Меняем отступы на размере экрана достаточно большом, чтобы уместить навбар,
* но недостаточно маленьком, чтобы мобильный навбар смотрелся адекватно. */
@media screen and (max-width: 1100px) {
  nav ul {
      width: 60%;
      margin: 45px 0 45px 5%;
      justify-content: space-around;
  }
  .contact-button-container {
      width: 30%;
      margin-right: 5%;
  }
}

/* На экранах шириной 900px и меньше, скрываем десктопный навбар 
* и показываем мобильный. */
@media screen and (max-width: 900px) {
  nav {
      display: none;
  }
  nav.mobile-nav {
      display: flex;
  }
}